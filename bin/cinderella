#! /usr/bin/env ruby

#--
###############################################################################
#                                                                             #
# cinderella -- Handle double encoded characters                              #
#   [A component of cmess, the encoding tool-box]                             #
#                                                                             #
# Copyright (C) 2008-2012 University of Cologne,                              #
#                         Albertus-Magnus-Platz,                              #
#                         50923 Cologne, Germany                              #
#                                                                             #
# Copyright (C) 2013-2016 Jens Wille                                          #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@gmail.com>                                       #
#                                                                             #
# cmess is free software; you can redistribute it and/or modify it under the  #
# terms of the GNU Affero General Public License as published by the Free     #
# Software Foundation; either version 3 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# cmess is distributed in the hope that it will be useful, but WITHOUT ANY    #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for     #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU Affero General Public License    #
# along with cmess. If not, see <http://www.gnu.org/licenses/>.               #
#                                                                             #
###############################################################################
#++

require 'safe_yaml/load'

require 'cmess/cinderella'
require 'cmess/cli'

include CMess::CLI

progname = File.basename($0)

options = {
  input:           STDIN,
  output:          STDOUT,
  pot:             nil,
  crop:            nil,
  source_encoding: nil,
  target_encoding: determine_system_encoding,
  csets:           [CMess::Cinderella::DEFAULT_CSETS_DIR],
  repair:          false
}

parse_options { |opts|
  opts.banner = "Usage: #{$0} [options] [FILE...]"

  opts.separator ''
  opts.separator 'Options:'

  opts.on('-i', '--input FILE', 'Input file to read from [Default: STDIN]') { |input|
    options[:input] = open_file_or_std(input)
    options[:input_set] = true
  }

  opts.separator ''

  opts.on('-p', '--pot FILE', 'The good into the pot...') { |pot|
    options[:pot] = open_file_or_std(pot, 'w')
  }

  opts.on('-c', '--crop FILE', '...the bad into the crop') { |crop|
    options[:crop] = open_file_or_std(crop, 'w')
  }

  opts.separator ''

  opts.on('-o', '--output [FILE]', 'Write both good and bad lines to FILE or', 'default [Default: STDOUT] (Particularly', "useful in combination with the '-r' option)") { |output|
    options[:output] = open_file_or_std(output, 'w') if output
    options[:pot] = options[:crop] = options[:output]
  }

  opts.separator ''

  opts.on('-I', '--in-place FILE', "Modify file in-place; sets '-i' and '-o'", '(Only really useful in combination with', "the '-r' option)") { |file|
    options[:input], options[:output] = open_file_in_place(file)
    options[:input_set] = true

    options[:pot] = options[:crop] = options[:output]
  }

  opts.separator ''

  opts.on('-e', '--source-encoding ENCODING', 'Source encoding (from) [REQUIRED]') { |encoding|
    options[:source_encoding] = encoding
  }

  opts.on('-t', '--target-encoding ENCODING', "Target encoding (to); see '-l' for a list", "of available encodings [Default: #{options[:target_encoding]}]") { |encoding|
    options[:target_encoding] = encoding
  }

  opts.separator ''

  opts.on('-T', '--addtl-target-encodings DIRECTORY', 'Directory providing additional char files', 'for target encoding') { |directory|
    ensure_directory(directory)
    options[:csets] |= [File.expand_path(directory)]
  }

  opts.separator ''

  opts.on('-l', '--list-encodings', 'Display a list of available target encodings', "and exit; see '-T' on how to add your own") {
    csets = {}

    options[:csets].each { |cset|
      encodings = Dir[File.join(cset, '*.yaml')].sort.map { |yaml|
        File.basename(yaml, '.yaml') unless File.symlink?(yaml)
      }.compact

      csets[cset] = encodings unless encodings.empty?
    }

    if csets.empty?
      puts "No target encodings available for #{progname}"
    else
      puts "Available target encodings for #{progname}:"

      csets.each { |cset, encodings|
        puts
        puts "[#{cset}]"

        encodings.each { |encoding|
          puts "  - #{encoding}"
        }
      }
    end

    exit
  }

  opts.separator ''

  opts.on('-r', '--repair', 'Try to repair corrupted characters') {
    options[:repair] = true
  }

  opts.separator ''
  opts.separator 'Generic options:'

  opts.on('-h', '--help', 'Print this help message and exit') {
    puts opts
    exit
  }

  opts.on('--version', 'Print program version and exit') {
    puts "#{progname} v#{CMess::Cinderella::VERSION} (part of cmess v#{CMess::VERSION})"
    exit
  }

  opts.separator ''
  opts.separator "If '-p' or '-c' is omitted, and '-o' is not given either, that particular output"
  opts.separator 'is ignored. When FILE is -, either STDIN or STDOUT is used (as appropriate).'
}

cli do
  options[:target_encoding].call if options[:target_encoding].respond_to?(:call)

  abort "No source encoding given! (Use the '-e' switch to do so; see '--help' for more information)" unless options[:source_encoding]

  yaml_file = "#{options[:target_encoding].downcase}.yaml"
  char_file = options[:csets].find { |cset|
    path = File.join(cset, yaml_file)
    break path if File.readable?(path)
  }

  abort "Char file not found for target encoding: #{options[:target_encoding]}" unless char_file

  trailing_args_as_input(options)

  CMess::Cinderella.pick(options.merge(chars: SafeYAML.load_file(char_file)))
end
